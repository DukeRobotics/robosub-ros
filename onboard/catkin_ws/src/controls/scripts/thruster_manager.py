#!/usr/bin/env python3

import yaml
import numpy as np
from thruster import Thruster


class ThrusterManager:
    """Compiles all thruster data, generating a wrench matrix that holds the force and torque of
    each thruster. Uses this matrix to calculate thruster allocations based on desired control
    effort in each degree of freedom (x, y, z, roll, pitch, yaw).

    Attributes:
        thrusters: The thrusters that are part of the robot.
        wrenchmat: A 6xT matrix with column vectors equal to the force and torque of each thruster
        wrenchmat_pinv: A Tx6 matrix that is used to solve for thruster allocations
    """

    def __init__(self, config_filename):
        """Creates a thruster manager object. Retrieves thruster data from a yaml config file and
        constructs Thrusters and wrench matrix.

        Args:
            config_filename: The vehicle configuration file holding thruster data
        """
        with open(config_filename) as f:
            vehicle = yaml.safe_load(f)

        self.thrusters = []
        for t_dict in vehicle['thrusters']:
            t = Thruster(t_dict['pos'], t_dict['rpy'], t_dict['flipped'])
            self.thrusters.append(t)

        self.wrenchmat = np.empty((6, len(self.thrusters)))
        for i, t in enumerate(self.thrusters):
            self.wrenchmat[0][i] = t.force_hat[0]
            self.wrenchmat[1][i] = t.force_hat[1]
            self.wrenchmat[2][i] = t.force_hat[2]
            self.wrenchmat[3][i] = t.torque[0]
            self.wrenchmat[4][i] = t.torque[1]
            self.wrenchmat[5][i] = t.torque[2]

        self.wrenchmat_pinv = np.linalg.pinv(self.wrenchmat)  # Calculate pseudoinverse of wrench matrix

    def calc_t_allocs(self, pid_wrench):
        """Calculates thruster allocations given wrench matrix and desired control effort in each
        DOF. Explanation of the math (everything is in terms of a local frame of reference):

        Let the desired control efforts in each DOF be a 6x1 vector p. A Tx6 wrench matrix W (where T is the number of
        thrusters) can be constructed such that each of its column vectors holds the force and torque generated by a
        given thruster. To solve for the thruster allocations x, we need to solve the equation p = Wx. We can multiply
        both sides by the Moore-Penrose pseudo-inverse of W (W_inv), yielding W_inv*p = x.

        TODO: Implement T200 power curve into thruster allocation calculation. Current algorithm assumes power curve
        is linear.
        https://bluerobotics.com/store/thrusters/t100-t200-thrusters/t200-thruster-r2-rp/#tab-technical-details

        Args:
            pid_wrench: The 6x1 vector holding control efforts for x, y, z, roll, pitch, yaw

        Returns:
            A Tx1 vector holding relative thruster allocations to exert the desired control effort
        """
        t_allocs = np.matmul(self.wrenchmat_pinv, pid_wrench)

        max_pow = np.max(np.abs(t_allocs))
        if max_pow > 1:
            t_allocs /= max_pow

        t_allocs[np.abs(t_allocs) < 0.001] = 0

        for i in range(len(t_allocs)):
            if self.thrusters[i].flipped:
                t_allocs[i] = -t_allocs[i]

        return t_allocs
