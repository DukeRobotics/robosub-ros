#ifndef THRUSTER_ALLOCATOR_H
#define THRUSTER_ALLOCATOR_H

#include <Eigen/Dense>
#include <string>

class ThrusterAllocator
{
public:
    /**
     * @brief Maximum absolute value allocation allowed for any thruster.
     */
    static constexpr double max_alloc = 1.0;

    /**
     * @brief Wrench matrix.
     *
     * @details 6 x n matrix where n is the number of thrusters.
     * Each column represents the force and torque generated by a single thruster for each axis.
     * Each row represents an axis, in the order of x, y, z, roll, pitch, yaw from top to bottom.
     */
    Eigen::MatrixXd wrench;

    /**
     * @brief Pseudoinverse of wrench matrix.
     *
     * @details n x 6 matrix where n is the number of thrusters.
     */
    Eigen::MatrixXd wrench_pinv;

    /**
     * @brief Default constructor with empty `wrench` and `wrench_pinv`.
     */
    ThrusterAllocator();

    /**
     * @brief Constructor that reads `wrench` and `wrench_pinv` from CSV files.
     *
     * @param wrench_file_path Path to CSV file containing wrench matrix.
     * @param wrench_pinv_file_path Path to CSV file containing pseudoinverse of wrench matrix.
     */
    ThrusterAllocator(std::string wrench_file_path, std::string wrench_pinv_file_path);

    /**
     * @brief Allocates thruster power to achieve desired wrench.
     *
     * @param set_power Desired power to allocate to thrusters.
     * @param power_scale_factor Scale factor to apply to `set_power`.
     * @param set_power_scaled Set power scaled by `power_scale_factor`.
     * @param unconstrained_allocs Unconstrained thruster allocations (maximum absolute value allocation is unlimited).
     * @param constrained_allocs Constrained thruster allocations (maximum absolute value allocation is `max_alloc`).
     * @param actual_power Actual power delivered along each axis with `constrained_allocs`.
     * @param set_scaled_actual_power_diff Difference between `set_power_scaled` and `actual_power`.
     */
    void allocate_thrusters(const Eigen::VectorXd &set_power, double &power_scale_factor,
                            Eigen::VectorXd &set_power_scaled, Eigen::VectorXd &unconstrained_allocs,
                            Eigen::VectorXd &constrained_allocs, Eigen::VectorXd &actual_power,
                            Eigen::VectorXd &set_scaled_actual_power_diff);
};

#endif